# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
version: 2.1
jobs:
  checkout_code:
    docker:
      # specify the version you desire here
      - image: circleci/ruby:2.6.1-node-browsers
    working_directory: ~/t-farm
    steps:
      - checkout
      - save_cache:
          key: v2-repo-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ~/t-farm
  test:
    docker:
      - image: circleci/ruby:2.6.1-node-browsers
        environment:
          RAILS_ENV: test
          MYSQL_HOST: 127.0.0.1
          MYSQL_PORT: 3306
          SELENIUM_DRIVER_URL: http://localhost:4444/wd/hub #circleの時だけ

      - image: selenium/standalone-chrome:3.141.59-yttrium
      - image: circleci/mysql:8.0.16
        command: mysqld --default-authentication-plugin=mysql_native_password
        environment:
          MYSQL_HOST: 127.0.0.1
          MYSQL_DATABASE: t-farm_test
          MYSQL_USER: root
          MYSQL_ROOT_PASSWORD: password
    working_directory: ~/t-farm

    steps:
      - checkout
      - restore_cache:
          key: v2-repo-{{ .Environment.CIRCLE_SHA1 }}
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "Gemfile.lock" }}
            # fallback to using the latest cache if no exact match is found
            - v2-dependencies-
      - run:
          name: updater bundler
          command: |
            gem update --system
            gem install bundler
      - run:
          name: bundle install dependencies
          command: |
            bundle check --path=vendor/bundle || bundle install --jobs 4 --retry 3 --path=vendor/bundle
      - run:
          name: bundle update
          command: bundle update
      - save_cache:
          paths:
            - ./vendor/bundle
          key: v2-dependencies-{{ checksum "Gemfile.lock" }}

      # Database setup
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://127.0.0.1:3306 -timeout 3m
      - run: rm ./config/database.yml
      - run: mv ./config/database.yml.ci ./config/database.yml
      - run:
          name: Prepare db
          command: |
            bundle exec rails db:migrate --trace
      # run tests!
      - run:
          name: Run rspec
          command: |
            mkdir /tmp/test-results
            TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | \
              circleci tests split --split-by=timings)"
            bundle exec rspec \
              --format progress \
              --out /tmp/test-results/rspec.xml \
              --format documentation \
              $TEST_FILES
      # collect reports
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results
  deploy:
    docker:
      - image: circleci/python
    steps:
      - checkout
      - setup_remote_docker #docer
      - run:
          name: "Install AWS"
          command: |
            sudo pip install awscli
            aws --version
            aws configure set region ap-northeast-1

      - run:
          name: "Install jq"
          command: sudo apt-get install -y jq

      - run:
          name: "Log in ECR"
          command: $(aws ecr get-login --no-include-email --region ap-northeast-1)
      
      - run:
          name: "Build dokcer image"
          command: docker build -t $AWS_ACCOUNT_ID.dkr.ecr.ap-northeast-1.amazonaws.com/t-farm_app:latest --build-arg RAILS_MASTER_KEY=$RAILS_MASTER_KEY --build-arg RAILS_ENV=production .

      - run:
          mame: "Push docker image"
          command: docker push $AWS_ACCOUNT_ID.dkr.ecr.ap-northeast-1.amazonaws.com/t-farm_app:latest

      - run:
          name: "rails db:migrate"
          command: aws ecs run-task --region ap-northeast-1 --cluster t-farm-ec2 --task-definition task --overrides file://ecs/run_task_db_migrate.json

      - run:
          name: "Update task"
          command: |
            aws ecs register-task-definition --family task --cli-input-json "$(aws ecs describe-task-definition --task-definition task | jq '.taskDefinition | { containerDefinitions: .containerDefinitions }')" \
              --task-role-arn arn:aws:iam::$AWS_ACCOUNT_ID:role/ecsTaskExecutionRole \
              --execution-role-arn arn:aws:iam::$AWS_ACCOUNT_ID:role/ecsTaskExecutionRole \
              --network-mode bridge \
              --cpu 250 --memory 800 \
              --requires-compatibilities EC2
      
      - run:
          name: "Update service"
          command: aws ecs update-service --cluster t-farm-ec2 --task-definition task --service service --region ap-northeast-1

workflows:
  version: 2.1
  test_and_deploy:
    jobs:
      - checkout_code
      - test:
          requires:
            - checkout_code
      - deploy:
          requires:
            - test
          filters:
            branches: 
              only: master
